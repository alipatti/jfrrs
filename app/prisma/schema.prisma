// documentation: https://pris.ly/d/prisma-schema

// TODO: setup postgress development database

generator client {
  provider  = "prisma-client-js"
  interface = "asyncio"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

/////////////////////////
// AUTH-RELATED MODELS //
/////////////////////////

// probably don't modify these

// site users
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  team FantasyTeam? // one-to-one
}

// accounts used to log into the site
// a user may have multiple accounts, e.g. google, github, email, etc. 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// logged-in user sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// one-time verification tokens for email-based login
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/////////////////////////////
// TRACK/XC-RELATED MODELS //
/////////////////////////////

model Meet {
  id      String  @id @default(cuid())
  idTFRRS Int     @unique
  isXC    Boolean

  name     String
  date     DateTime
  location String

  // optional json blob to store unstructured attributes
  // e.g. host, director, timing company, referee, etc.
  attributes Json?

  scrapedAt DateTime @default(now())

  events Event[]
}

model Event {
  id      String @id @default(cuid())
  idTfrrs Int    @unique

  name          String
  gender         String @db.Char(1)
  distanceMeters Float?

  scrapedAt DateTime @default(now())

  meet   Meet   @relation(fields: [meetId], references: [id])
  meetId String

  results Result[]
}

model Result {
  id String @id @default(cuid())

  time  Float
  place Int
  score Int?

  team   String?
  teamId String?

  classYear String @db.Char(4) // e.g. SO-2

  scrapedAt DateTime @default(now())

  race   Event  @relation(fields: [raceId], references: [id], onDelete: Cascade)
  raceId String

  athlete   Athlete @relation(fields: [athleteId], references: [id], onDelete: Restrict)
  athleteId String
}

model Athlete {
  id        String @id @default(cuid())
  idTFRRS   Int    @unique
  firstName String
  lastName  String

  scrapedAt DateTime @default(now())

  team   Team?   @relation(fields: [teamId], references: [id], onDelete: SetNull)
  teamId String?

  results      Result[]
  fantasyTeams AthleteOnFantasyTeam[]
}

model Team {
  id      String @id @default(cuid())
  idTFRRS Int    @unique

  state  String @db.Char(2)
  level  String // e.g. College
  gender String @db.Char(1) // m/w
  name   String // e.g. Carleton
  imgUrl String

  scrapedAt DateTime @default(now())

  athletes Athlete[]
  leagues  League[]
}

model League {
  id      String @id @default(cuid())
  idTFRRS Int    @unique
  name    String

  teams Team[]
}

////////////////////////////
// FANTASY-RELATED MODELS //
////////////////////////////

model FantasyLeague {
  id   String @id @default(cuid())
  name String @db.VarChar(30)

  teams FantasyTeam[]
}

model FantasyTeam {
  id String @id @default(cuid())

  name      String @db.VarChar(32) // e.g. Minnesota Vikings
  shortName String @db.Char(3) // e.g. MIN

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique // one-to-one

  league   FantasyLeague @relation(fields: [leagueId], references: [id], onDelete: SetNull)
  leagueId String

  athletes AthleteOnFantasyTeam[]

  @@unique([id, leagueId])
}

model AthleteOnFantasyTeam {
  id String @id @default(cuid())

  athlete   Athlete @relation(fields: [athleteID], references: [id], onDelete: Cascade)
  athleteID String

  team     FantasyTeam @relation(fields: [teamId, leagueId], references: [id, leagueId], onDelete: Cascade)
  teamId   String
  leagueId String

  methodAcquired String?
  onTeamSince    DateTime @updatedAt

  @@unique([leagueId, athleteID]) // only one copy of each athlete per league
}

// documentation: https://pris.ly/d/prisma-schema

// TODO
// - add createdAt to all models
// - can enforce at a db level that a user can't own a league if they have a team in a different league?

generator client {
  provider = "prisma-client-js"
}

// TODO setup production database 
// (with some online provider. i don't want to host this myself)

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

/////////////////////////////
// TRACK/XC-RELATED MODELS //
/////////////////////////////

model Meet {
  id      String @id @default(cuid())
  idTfrrs Int    @unique

  name     String
  date     DateTime
  location String?
  state    State

  // json blob to store optional unstructured data
  // e.g. host, director, timing company, referee, etc.
  attributes Json

  scrapedAt DateTime @default(now())

  events Event[]
}

model Event {
  id      String @id @default(cuid())
  idTfrrs Int    @unique

  name           String
  gender         Gender
  distanceMeters Float?

  meet   Meet   @relation(fields: [meetId], references: [id], onDelete: Cascade)
  meetId String

  results Result[]
}

model Result {
  id String @id @default(cuid())

  place     Int
  time      Float?
  score     Int?
  classYear ClassYear?

  athlete   Athlete? @relation(fields: [athleteId], references: [id], onDelete: Restrict)
  athleteId String?

  team   Team?   @relation(fields: [teamId], references: [id], onDelete: Restrict)
  teamId String?

  race   Event  @relation(fields: [raceId], references: [id], onDelete: Cascade)
  raceId String
}

model Athlete {
  id      String @id @default(cuid())
  idTfrrs Int    @unique
  name    String

  scrapedAt DateTime @default(now())

  results      Result[]
  fantasyTeams AthleteOnFantasyTeam[]
}

model Team {
  id      String @id @default(cuid())
  idTfrrs String @unique

  state  State
  level  Level
  gender Gender
  name   String
  imgUrl String?

  scrapedAt DateTime @default(now())

  conferences Conference[]
  results     Result[]
}

model Conference {
  id      String @id @default(cuid())
  idTfrrs Int    @unique
  name    String

  scrapedAt DateTime @default(now())

  teams Team[]
}

////////////////////////////
// FANTASY-RELATED MODELS //
////////////////////////////

model FantasyLeague {
  id   String @id @default(cuid())
  name String @db.VarChar(30)
  slug String @unique @db.VarChar(6) // for url purposes

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Restrict)
  ownerId String @unique

  teams FantasyTeam[]
}

model FantasyTeam {
  id String @id @default(cuid())

  name      String @db.VarChar(32) // e.g. Minnesota Vikings
  shortName String @db.Char(3) // e.g. MIN

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique // one-to-one

  league   FantasyLeague @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  leagueId String

  athletes AthleteOnFantasyTeam[]

  @@unique([id, leagueId])
}

model AthleteOnFantasyTeam {
  id String @id @default(cuid())

  athlete   Athlete @relation(fields: [athleteID], references: [id], onDelete: Cascade)
  athleteID String

  team     FantasyTeam @relation(fields: [teamId, leagueId], references: [id, leagueId], onDelete: Cascade)
  teamId   String
  leagueId String

  onTeamSince DateTime @updatedAt

  @@unique([leagueId, athleteID]) // only one copy of each athlete per league
}

/////////////////////////
// AUTH-RELATED MODELS //
/////////////////////////

// used by `next-auth`
// careful modifying these

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  team        FantasyTeam? // one-to-one
  ownedLeague FantasyLeague?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

///////////
// ENUMS // 
///////////

enum Gender {
  M
  F
}

enum ClassYear {
  FR
  SO
  JR
  SR
}

enum Level {
  college
  jcollege
}

// including Canadian provinces, DC, and Puerto Rico
enum State {
  AK
  AL
  AR
  AZ
  BC
  CA
  CO
  CT
  DC
  DE
  FL
  GA
  HI
  IA
  ID
  IL
  IN
  KS
  KY
  LA
  MA
  MD
  ME
  MI
  MN
  MO
  MS
  MT
  NC
  ND
  NE
  NH
  NJ
  NM
  NV
  NY
  OH
  OK
  OR
  PA
  PR
  RI
  SC
  SD
  SK
  TN
  TX
  UT
  VA
  VI
  VT
  WA
  WI
  WV
  WY
}
